--- 4508_aufs4-mmap.patch	2016-07-25 22:55:58.297468511 -0400
+++ 4508_aufs4-mmap-pax.patch	2016-07-25 23:36:55.538306995 -0400
@@ -100,9 +100,9 @@
 +#define vmr_fput(region)		vmr_do_fput(region, __func__, __LINE__)
 +#endif /* !CONFIG_MMU */
 +
- extern int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, int len, int write);
- extern int access_remote_vm(struct mm_struct *mm, unsigned long addr,
- 		void *buf, int len, int write);
+ extern ssize_t access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, size_t len, int write);
+ extern ssize_t access_remote_vm(struct mm_struct *mm, unsigned long addr,
+ 		void *buf, size_t len, int write);
 diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h
 index f8d1492..c3a3760 100644
 --- a/include/linux/mm_types.h
@@ -128,14 +128,14 @@
 --- a/kernel/fork.c
 +++ b/kernel/fork.c
 @@ -465,7 +465,7 @@ static int dup_mmap(struct mm_struct *mm, struct mm_struct *oldmm)
- 			struct inode *inode = file_inode(file);
- 			struct address_space *mapping = file->f_mapping;
- 
--			get_file(file);
-+			vma_get_file(tmp);
- 			if (tmp->vm_flags & VM_DENYWRITE)
- 				atomic_dec(&inode->i_writecount);
- 			i_mmap_lock_write(mapping);
+ 		struct inode *inode = file_inode(file);
+ 		struct address_space *mapping = file->f_mapping;
+
+-		get_file(file);
++		vma_get_file(tmp);
+ 		if (tmp->vm_flags & VM_DENYWRITE)
+ 			atomic_dec(&inode->i_writecount);
+ 		i_mmap_lock_write(mapping);
 diff --git a/mm/Makefile b/mm/Makefile
 index 2ed4319..e3a53f5 100644
 --- a/mm/Makefile
@@ -222,9 +222,9 @@
  	if (new->vm_file)
 -		fput(new->vm_file);
 +		vma_fput(new);
- 	unlink_anon_vmas(new);
   out_free_mpol:
  	mpol_put(vma_policy(new));
+  out_free_vma:
 @@ -2649,7 +2649,7 @@ SYSCALL_DEFINE5(remap_file_pages, unsigned long, start, unsigned long, size,
  	struct vm_area_struct *vma;
  	unsigned long populate = 0;
