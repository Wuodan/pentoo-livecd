diff -Naur linux-4.4.2-hardened/fs/proc/base.c linux-4.4.2-hardened-pax/fs/proc/base.c
--- linux-4.4.2-hardened/fs/proc/base.c	2016-03-04 16:05:34.930978484 -0500
+++ linux-4.4.2-hardened-pax/fs/proc/base.c	2016-04-11 16:49:11.758062846 -0400
@@ -2041,7 +2041,7 @@
 	down_read(&mm->mmap_sem);
 	vma = find_exact_vma(mm, vm_start, vm_end);
 	if (vma && vma->vm_file) {
-		*path = vma->vm_file->f_path;
+		*path = vma_pr_or_file(vma)->f_path;
 		path_get(path);
 		rc = 0;
 	}
diff -Naur linux-4.4.2-hardened/fs/proc/nommu.c linux-4.4.2-hardened-pax/fs/proc/nommu.c
--- linux-4.4.2-hardened/fs/proc/nommu.c	2016-03-04 16:05:34.931978484 -0500
+++ linux-4.4.2-hardened-pax/fs/proc/nommu.c	2016-04-11 16:49:11.758062846 -0400
@@ -45,7 +45,10 @@
 	file = region->vm_file;
 
 	if (file) {
-		struct inode *inode = file_inode(region->vm_file);
+		struct inode *inode;
+
+		file = vmr_pr_or_file(region);
+		inode = file_inode(file);
 		dev = inode->i_sb->s_dev;
 		ino = inode->i_ino;
 	}
diff -Naur linux-4.4.2-hardened/fs/proc/task_mmu.c linux-4.4.2-hardened-pax/fs/proc/task_mmu.c
--- linux-4.4.2-hardened/fs/proc/task_mmu.c	2016-03-04 16:05:34.932978484 -0500
+++ linux-4.4.2-hardened-pax/fs/proc/task_mmu.c	2016-04-11 16:49:11.759062846 -0400
@@ -305,7 +305,10 @@
 	const char *name = NULL;
 
 	if (file) {
-		struct inode *inode = file_inode(vma->vm_file);
+		struct inode *inode;
+
+		file = vma_pr_or_file(vma);
+		inode = file_inode(file);
 		dev = inode->i_sb->s_dev;
 		ino = inode->i_ino;
 		pgoff = ((loff_t)vma->vm_pgoff) << PAGE_SHIFT;
@@ -1556,7 +1559,7 @@
 	struct proc_maps_private *proc_priv = &numa_priv->proc_maps;
 	struct vm_area_struct *vma = v;
 	struct numa_maps *md = &numa_priv->md;
-	struct file *file = vma->vm_file;
+	struct file *file = vma_pr_or_file(vma);
 	struct mm_struct *mm = vma->vm_mm;
 	struct mm_walk walk = {
 		.hugetlb_entry = gather_hugetlb_stats,
diff -Naur linux-4.4.2-hardened/fs/proc/task_nommu.c linux-4.4.2-hardened-pax/fs/proc/task_nommu.c
--- linux-4.4.2-hardened/fs/proc/task_nommu.c	2016-03-04 16:05:34.932978484 -0500
+++ linux-4.4.2-hardened-pax/fs/proc/task_nommu.c	2016-04-11 16:49:11.759062846 -0400
@@ -160,7 +160,10 @@
 	file = vma->vm_file;
 
 	if (file) {
-		struct inode *inode = file_inode(vma->vm_file);
+		struct inode *inode;
+
+		file = vma_pr_or_file(vma);
+		inode = file_inode(file);
 		dev = inode->i_sb->s_dev;
 		ino = inode->i_ino;
 		pgoff = (loff_t)vma->vm_pgoff << PAGE_SHIFT;
diff -Naur linux-4.4.2-hardened/include/linux/mm.h linux-4.4.2-hardened-pax/include/linux/mm.h
--- linux-4.4.2-hardened/include/linux/mm.h	2016-03-04 16:05:34.961978484 -0500
+++ linux-4.4.2-hardened-pax/include/linux/mm.h	2016-04-11 16:52:37.953070189 -0400
@@ -1189,6 +1189,28 @@
 }
 #endif
 
+extern void vma_do_file_update_time(struct vm_area_struct *, const char[], int);
+extern struct file *vma_do_pr_or_file(struct vm_area_struct *, const char[],
+				      int);
+extern void vma_do_get_file(struct vm_area_struct *, const char[], int);
+extern void vma_do_fput(struct vm_area_struct *, const char[], int);
+
+#define vma_file_update_time(vma)	vma_do_file_update_time(vma, __func__, \
+								__LINE__)
+#define vma_pr_or_file(vma)		vma_do_pr_or_file(vma, __func__, \
+							  __LINE__)
+#define vma_get_file(vma)		vma_do_get_file(vma, __func__, __LINE__)
+#define vma_fput(vma)			vma_do_fput(vma, __func__, __LINE__)
+
+#ifndef CONFIG_MMU
+extern struct file *vmr_do_pr_or_file(struct vm_region *, const char[], int);
+extern void vmr_do_fput(struct vm_region *, const char[], int);
+
+#define vmr_pr_or_file(region)		vmr_do_pr_or_file(region, __func__, \
+							  __LINE__)
+#define vmr_fput(region)		vmr_do_fput(region, __func__, __LINE__)
+#endif /* !CONFIG_MMU */
+
 extern ssize_t access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, size_t len, int write);
 extern ssize_t access_remote_vm(struct mm_struct *mm, unsigned long addr,
 		void *buf, size_t len, int write);
diff -Naur linux-4.4.2-hardened/include/linux/mm_types.h linux-4.4.2-hardened-pax/include/linux/mm_types.h
--- linux-4.4.2-hardened/include/linux/mm_types.h	2016-03-04 16:05:34.961978484 -0500
+++ linux-4.4.2-hardened-pax/include/linux/mm_types.h	2016-04-11 16:49:11.759062846 -0400
@@ -272,6 +272,7 @@
 	unsigned long	vm_top;		/* region allocated to here */
 	unsigned long	vm_pgoff;	/* the offset in vm_file corresponding to vm_start */
 	struct file	*vm_file;	/* the backing file or NULL */
+	struct file	*vm_prfile;	/* the virtual backing file or NULL */
 
 	int		vm_usage;	/* region usage count (access under nommu_region_sem) */
 	bool		vm_icache_flushed : 1; /* true if the icache has been flushed for
@@ -346,6 +347,7 @@
 	unsigned long vm_pgoff;		/* Offset (within vm_file) in PAGE_SIZE
 					   units, *not* PAGE_CACHE_SIZE */
 	struct file * vm_file;		/* File we map to (can be NULL). */
+	struct file *vm_prfile;		/* shadow of vm_file */
 	void * vm_private_data;		/* was vm_pte (shared mem) */
 
 #ifndef CONFIG_MMU
diff -Naur linux-4.4.2-hardened/kernel/fork.c linux-4.4.2-hardened-pax/kernel/fork.c
--- linux-4.4.2-hardened/kernel/fork.c	2016-03-04 16:05:34.993978484 -0500
+++ linux-4.4.2-hardened-pax/kernel/fork.c	2016-04-11 16:54:45.577074734 -0400
@@ -479,7 +479,7 @@
 		struct inode *inode = file_inode(file);
 		struct address_space *mapping = file->f_mapping;
 
-		get_file(file);
+		vma_get_file(tmp);
 		if (tmp->vm_flags & VM_DENYWRITE)
 			atomic_dec(&inode->i_writecount);
 		i_mmap_lock_write(mapping);
diff -Naur linux-4.4.2-hardened/mm/filemap.c linux-4.4.2-hardened-pax/mm/filemap.c
--- linux-4.4.2-hardened/mm/filemap.c	2016-03-04 16:05:35.017978484 -0500
+++ linux-4.4.2-hardened-pax/mm/filemap.c	2016-04-11 16:49:11.760062846 -0400
@@ -2128,7 +2128,7 @@
 	int ret = VM_FAULT_LOCKED;
 
 	sb_start_pagefault(inode->i_sb);
-	file_update_time(vma->vm_file);
+	vma_file_update_time(vma);
 	lock_page(page);
 	if (page->mapping != inode->i_mapping) {
 		unlock_page(page);
diff -Naur linux-4.4.2-hardened/mm/Makefile linux-4.4.2-hardened-pax/mm/Makefile
--- linux-4.4.2-hardened/mm/Makefile	2016-01-10 18:01:32.000000000 -0500
+++ linux-4.4.2-hardened-pax/mm/Makefile	2016-04-11 16:49:11.760062846 -0400
@@ -21,7 +21,7 @@
 			   mm_init.o mmu_context.o percpu.o slab_common.o \
 			   compaction.o vmacache.o \
 			   interval_tree.o list_lru.o workingset.o \
-			   debug.o $(mmu-y)
+			   prfile.o debug.o $(mmu-y)
 
 obj-y += init-mm.o
 
diff -Naur linux-4.4.2-hardened/mm/memory.c linux-4.4.2-hardened-pax/mm/memory.c
--- linux-4.4.2-hardened/mm/memory.c	2016-03-04 16:05:35.020978484 -0500
+++ linux-4.4.2-hardened-pax/mm/memory.c	2016-04-11 16:49:11.761062846 -0400
@@ -2061,7 +2061,7 @@
 		}
 
 		if (!page_mkwrite)
-			file_update_time(vma->vm_file);
+			vma_file_update_time(vma);
 	}
 
 	return VM_FAULT_WRITE;
diff -Naur linux-4.4.2-hardened/mm/mmap.c linux-4.4.2-hardened-pax/mm/mmap.c
--- linux-4.4.2-hardened/mm/mmap.c	2016-03-04 16:05:35.022978484 -0500
+++ linux-4.4.2-hardened-pax/mm/mmap.c	2016-04-11 16:49:11.761062846 -0400
@@ -297,7 +297,7 @@
 	if (vma->vm_ops && vma->vm_ops->close)
 		vma->vm_ops->close(vma);
 	if (vma->vm_file)
-		fput(vma->vm_file);
+		vma_fput(vma);
 	mpol_put(vma_policy(vma));
 	kmem_cache_free(vm_area_cachep, vma);
 	return next;
@@ -916,7 +916,7 @@
 	if (remove_next) {
 		if (file) {
 			uprobe_munmap(next, next->vm_start, next->vm_end);
-			fput(file);
+			vma_fput(vma);
 		}
 		if (next->anon_vma)
 			anon_vma_merge(vma, next);
@@ -1854,8 +1854,8 @@
 	return addr;
 
 unmap_and_free_vma:
+	vma_fput(vma);
 	vma->vm_file = NULL;
-	fput(file);
 
 	/* Undo any partial mapping done by a device driver. */
 	unmap_region(mm, vma, prev, vma->vm_start, vma->vm_end);
@@ -2900,7 +2900,7 @@
 		goto out_free_mpol;
 
 	if (new->vm_file)
-		get_file(new->vm_file);
+		vma_get_file(new);
 
 	if (new->vm_ops && new->vm_ops->open)
 		new->vm_ops->open(new);
@@ -2951,7 +2951,7 @@
 	if (new->vm_ops && new->vm_ops->close)
 		new->vm_ops->close(new);
 	if (new->vm_file)
-		fput(new->vm_file);
+		vma_fput(new);
  out_free_mpol:
 	mpol_put(vma_policy(new));
  out_free_vma:
@@ -3138,7 +3138,6 @@
 	struct vm_area_struct *vma;
 	unsigned long populate = 0;
 	unsigned long ret = -EINVAL;
-	struct file *file;
 
 	pr_warn_once("%s (%d) uses deprecated remap_file_pages() syscall. "
 			"See Documentation/vm/remap_file_pages.txt.\n",
@@ -3187,10 +3186,10 @@
 		munlock_vma_pages_range(vma, start, start + size);
 	}
 
-	file = get_file(vma->vm_file);
+	vma_get_file(vma);
 	ret = do_mmap_pgoff(vma->vm_file, start, size,
 			prot, flags, pgoff, &populate);
-	fput(file);
+	vma_fput(vma);
 out:
 	up_write(&mm->mmap_sem);
 	if (populate)
@@ -3491,7 +3490,7 @@
 		if (anon_vma_clone(new_vma, vma))
 			goto out_free_mempol;
 		if (new_vma->vm_file)
-			get_file(new_vma->vm_file);
+			vma_get_file(new_vma);
 		if (new_vma->vm_ops && new_vma->vm_ops->open)
 			new_vma->vm_ops->open(new_vma);
 		vma_link(mm, new_vma, prev, rb_link, rb_parent);
diff -Naur linux-4.4.2-hardened/mm/nommu.c linux-4.4.2-hardened-pax/mm/nommu.c
--- linux-4.4.2-hardened/mm/nommu.c	2016-03-04 16:05:35.023978484 -0500
+++ linux-4.4.2-hardened-pax/mm/nommu.c	2016-04-11 16:49:11.761062846 -0400
@@ -670,7 +670,7 @@
 		up_write(&nommu_region_sem);
 
 		if (region->vm_file)
-			fput(region->vm_file);
+			vmr_fput(region);
 
 		/* IO memory and memory shared directly out of the pagecache
 		 * from ramfs/tmpfs mustn't be released here */
@@ -828,7 +828,7 @@
 	if (vma->vm_ops && vma->vm_ops->close)
 		vma->vm_ops->close(vma);
 	if (vma->vm_file)
-		fput(vma->vm_file);
+		vma_fput(vma);
 	put_nommu_region(vma->vm_region);
 	kmem_cache_free(vm_area_cachep, vma);
 }
@@ -1345,7 +1345,7 @@
 					goto error_just_free;
 				}
 			}
-			fput(region->vm_file);
+			vmr_fput(region);
 			kmem_cache_free(vm_region_jar, region);
 			region = pregion;
 			result = start;
@@ -1420,10 +1420,10 @@
 	up_write(&nommu_region_sem);
 error:
 	if (region->vm_file)
-		fput(region->vm_file);
+		vmr_fput(region);
 	kmem_cache_free(vm_region_jar, region);
 	if (vma->vm_file)
-		fput(vma->vm_file);
+		vma_fput(vma);
 	kmem_cache_free(vm_area_cachep, vma);
 	return ret;
 
diff -Naur linux-4.4.2-hardened/mm/prfile.c linux-4.4.2-hardened-pax/mm/prfile.c
--- linux-4.4.2-hardened/mm/prfile.c	1969-12-31 19:00:00.000000000 -0500
+++ linux-4.4.2-hardened-pax/mm/prfile.c	2016-04-11 16:49:11.761062846 -0400
@@ -0,0 +1,86 @@
+/*
+ * Mainly for aufs which mmap(2) diffrent file and wants to print different path
+ * in /proc/PID/maps.
+ * Call these functions via macros defined in linux/mm.h.
+ *
+ * See Documentation/filesystems/aufs/design/06mmap.txt
+ *
+ * Copyright (c) 2014 Junjro R. Okajima
+ * Copyright (c) 2014 Ian Campbell
+ */
+
+#include <linux/mm.h>
+#include <linux/file.h>
+#include <linux/fs.h>
+
+/* #define PRFILE_TRACE */
+static inline void prfile_trace(struct file *f, struct file *pr,
+			      const char func[], int line, const char func2[])
+{
+#ifdef PRFILE_TRACE
+	if (pr)
+		pr_info("%s:%d: %s, %s\n", func, line, func2,
+			f ? (char *)f->f_path.dentry->d_name.name : "(null)");
+#endif
+}
+
+void vma_do_file_update_time(struct vm_area_struct *vma, const char func[],
+			     int line)
+{
+	struct file *f = vma->vm_file, *pr = vma->vm_prfile;
+
+	prfile_trace(f, pr, func, line, __func__);
+	file_update_time(f);
+	if (f && pr)
+		file_update_time(pr);
+}
+
+struct file *vma_do_pr_or_file(struct vm_area_struct *vma, const char func[],
+			       int line)
+{
+	struct file *f = vma->vm_file, *pr = vma->vm_prfile;
+
+	prfile_trace(f, pr, func, line, __func__);
+	return (f && pr) ? pr : f;
+}
+
+void vma_do_get_file(struct vm_area_struct *vma, const char func[], int line)
+{
+	struct file *f = vma->vm_file, *pr = vma->vm_prfile;
+
+	prfile_trace(f, pr, func, line, __func__);
+	get_file(f);
+	if (f && pr)
+		get_file(pr);
+}
+
+void vma_do_fput(struct vm_area_struct *vma, const char func[], int line)
+{
+	struct file *f = vma->vm_file, *pr = vma->vm_prfile;
+
+	prfile_trace(f, pr, func, line, __func__);
+	fput(f);
+	if (f && pr)
+		fput(pr);
+}
+
+#ifndef CONFIG_MMU
+struct file *vmr_do_pr_or_file(struct vm_region *region, const char func[],
+			       int line)
+{
+	struct file *f = region->vm_file, *pr = region->vm_prfile;
+
+	prfile_trace(f, pr, func, line, __func__);
+	return (f && pr) ? pr : f;
+}
+
+void vmr_do_fput(struct vm_region *region, const char func[], int line)
+{
+	struct file *f = region->vm_file, *pr = region->vm_prfile;
+
+	prfile_trace(f, pr, func, line, __func__);
+	fput(f);
+	if (f && pr)
+		fput(pr);
+}
+#endif /* !CONFIG_MMU */
